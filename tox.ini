[tox]
requires =
    tox>=4.23.2
    tox-uv>=1.20.2
env_list =
    py
    deps
    docs
    lint
    milestone
    pkg
skip_missing_interpreters = true

[testenv]
description = Run pytest under {basepython}
package = editable
extras =
    test
pass_env =
    CI
    CONTAINER_*
    DOCKER_*
    GITHUB_*
    HOME
    PYTEST_*
    SSH_AUTH_SOCK
    TERM
    USER
set_env =
    !milestone: PIP_CONSTRAINT = {toxinidir}/.config/constraints.txt
    !milestone: UV_CONSTRAINT = {toxinidir}/.config/constraints.txt
    COVERAGE_COMBINED = {envdir}/.coverage
    COVERAGE_FILE = {env:COVERAGE_FILE:{envdir}/.coverage.{envname}}
    COVERAGE_PROCESS_START = {toxinidir}/pyproject.toml
    FORCE_COLOR = 1
    PRE_COMMIT_COLOR = always
    TERM = xterm-256color
commands_pre =
    py{,310,311,312,313}: sh -c "rm -f {envdir}/.coverage* 2>/dev/null || true"
    py{,310,311,312,313}: sh -c "npm add -D @devcontainers/cli"
commands =
    python -c 'import pathlib; pathlib.Path("{env_site_packages_dir}/cov.pth").write_text("import coverage; coverage.process_startup()")'
    coverage run -m pytest {posargs:-n auto --junitxml=./junit.xml}
commands_post =
    py{,310,311,312,313}: ./tools/report-coverage
allowlist_externals =
    ./tools/report-coverage
    git
    rm
    sh

[testenv:deps]
description = Bump all dependencies
base_python = python3.10
skip_install = true
deps =
    {[testenv:lint]deps}
extras =
set_env =
    PIP_CONSTRAINT = /dev/null
    UV_CONSTRAINT = /dev/null
commands_pre =
commands =
    pre-commit run --all-files --show-diff-on-failure --hook-stage manual deps
    pre-commit run --all-files --show-diff-on-failure lock
    pre-commit autoupdate
    tox -e lint
    git diff --exit-code
env_dir = {toxworkdir}/lint

[testenv:docs]
description = Builds docs
package = editable
skip_install = false
extras =
    docs
set_env =
    DYLD_FALLBACK_LIBRARY_PATH = /opt/homebrew/lib:{env:LD_LIBRARY_PATH}
    NO_COLOR = 1
    TERM = dump
commands =
    mkdocs build {posargs:--strict --site-dir=_readthedocs/html/}

[testenv:lint]
description = Enforce quality standards under {basepython}
skip_install = true
deps =
    pre-commit
    pre-commit-uv>=4.1.4
    uv>=0.5.25
set_env =
    PIP_CONSTRAINT = /dev/null
    UV_CONSTRAINT = /dev/null
commands =
    pre-commit run --show-diff-on-failure --all-files

[testenv:milestone]
description =
    Run tests with ansible-core milestone branch and without dependencies constraints
deps =
    ansible-core@ https://github.com/ansible/ansible/archive/milestone.tar.gz
set_env =
    {[testenv]set_env}
    PIP_CONSTRAINT = /dev/null
    UV_CONSTRAINT = /dev/null

[testenv:pkg]
description =
    Do packaging/distribution
skip_install = true
deps =
    build>=0.9
    twine >= 4.0.2  # pyup: ignore
set_env =
commands =
    rm -rfv {toxinidir}/dist/
    python -m build --outdir {toxinidir}/dist/ {toxinidir}
    sh -c "python -m twine check --strict {toxinidir}/dist/*"
